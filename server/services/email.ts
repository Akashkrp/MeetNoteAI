import nodemailer from "nodemailer";

// Configure email transporter
const transporter = nodemailer.createTransport({
  // Use environment variables for email configuration
  host: process.env.SMTP_HOST || "smtp.gmail.com",
  port: parseInt(process.env.SMTP_PORT || "587"),
  secure: false, // true for 465, false for other ports
  auth: {
    user: process.env.SMTP_USER || process.env.EMAIL_USER || "noreply@example.com",
    pass: process.env.SMTP_PASS || process.env.EMAIL_PASS || "default_password",
  },
});

export interface EmailOptions {
  recipients: string[];
  subject: string;
  summaryContent: string;
  originalTranscript?: string;
  additionalMessage?: string;
  includeOriginal?: boolean;
  sendCopy?: boolean;
  senderEmail?: string;
}

export async function sendSummaryEmail(options: EmailOptions): Promise<void> {
  try {
    const {
      recipients,
      subject,
      summaryContent,
      originalTranscript,
      additionalMessage,
      includeOriginal = false,
      sendCopy = false,
      senderEmail
    } = options;

    // Build email content
    let htmlContent = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
          <h1 style="color: #2563eb; margin: 0;">Meeting Summary</h1>
          <p style="color: #64748b; margin: 10px 0 0 0;">Generated by AI Meeting Notes Summarizer</p>
        </div>
    `;

    if (additionalMessage) {
      htmlContent += `
        <div style="background-color: #e5f3ff; padding: 15px; border-radius: 6px; margin-bottom: 20px;">
          <p style="margin: 0; color: #1e293b;">${additionalMessage.replace(/\n/g, '<br>')}</p>
        </div>
      `;
    }

    htmlContent += `
        <div style="background-color: white; border: 1px solid #e2e8f0; border-radius: 6px; padding: 20px;">
          <h2 style="color: #1e293b; margin-top: 0;">Summary</h2>
          <div style="color: #374151; line-height: 1.6;">
            ${summaryContent.replace(/\n/g, '<br>').replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')}
          </div>
        </div>
    `;

    if (includeOriginal && originalTranscript) {
      htmlContent += `
        <div style="background-color: #f8fafc; border: 1px solid #e2e8f0; border-radius: 6px; padding: 20px; margin-top: 20px;">
          <h3 style="color: #64748b; margin-top: 0;">Original Transcript</h3>
          <div style="color: #64748b; line-height: 1.6; font-family: monospace; white-space: pre-wrap;">
            ${originalTranscript}
          </div>
        </div>
      `;
    }

    htmlContent += `
        <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #e2e8f0; color: #64748b; font-size: 14px;">
          <p>This summary was generated automatically. Please review for accuracy.</p>
        </div>
      </div>
    `;

    // Prepare recipients list
    let allRecipients = [...recipients];
    if (sendCopy && senderEmail) {
      allRecipients.push(senderEmail);
    }

    // Send email
    const mailOptions = {
      from: process.env.SMTP_USER || "noreply@example.com",
      to: allRecipients.join(", "),
      subject: subject,
      html: htmlContent,
    };

    await transporter.sendMail(mailOptions);
  } catch (error: any) {
    console.error("Email sending error:", error);
    throw new Error(`Failed to send email: ${error.message}`);
  }
}

// Verify email configuration
export async function verifyEmailConfig(): Promise<boolean> {
  try {
    await transporter.verify();
    return true;
  } catch (error) {
    console.error("Email configuration error:", error);
    return false;
  }
}
